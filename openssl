#!/bin/bash

set -e

rm -rf ./tmp
mkdir -p ./tmp/self-signed-ssl

function bold {
    echo -e "\033[1m$1\033[0m"
}

function info {
    echo -e "\033[0;32m\033[1m$1\033[0m$2"
}

function error {
    echo -e "\033[0;31m$1\033[0m"
}

echo
bold "Create a certificate by using OpenSSL and secure your internal network with TLSv1.3"

# CN according to RFC1123 or the Hostname of the Docker Container
# Visit - https://www.rfc-editor.org/rfc/rfc1123
echo
info "Common name (CN)" " - press enter to skip"
echo "Common name according to RFC1123 or hostname of the Docker Container. Visit https://www.rfc-editor.org/rfc/rfc1123"
echo "Default: localhost"
read -r -p ">  " COMMON_NAME
CN=${COMMON_NAME:=localhost}

if [ "$CN" != "localhost" ]; then
    CN=$(echo $COMMON_NAME | awk '{print tolower($0)}')
fi

if [ -d "./tls/$CN" ]; then
    error "ERROR: Directory ./tls/$CN is exist"
    exit 1
fi

# Key size
echo
info "Key size ECDSA" " - press enter to skip"
echo "Commonly used key sizes for ECDSA include secp256r1, secp384r1, or secp521r1"
echo "Default secp256r1"
read -r -p ">  " KEY_SIZE
SIZE=${KEY_SIZE:=secp256r1}

case "$SIZE" in
    "secp256r1" | "secp256r1" | "secp256r1")
        echo -n
        ;;
    *)
        error "Invalid key size"
        exit 1
        ;;
esac

# DNS
echo
info "DNS" " - press enter to skip"
echo "DNS same as (CN) or wildcard *.example.com. Use \",\" for more than one DNS"
echo "Default: $CN"
read -r -p ">  " DNS_NAME
DNS=

if [ -n "$DNS_NAME" ]; then
    DNS=$(echo $DNS_NAME | awk '{print tolower($0)}')
    ARR_DNS=$(echo $DNS | tr ',' '\n')
    for OUTPUT in $ARR_DNS; do
        sleep 0.1; echo -n "DNS:$OUTPUT," >> ./tmp/self-signed-ssl/dns &
    done
    echo -n $(cat ./tmp/self-signed-ssl/dns | head -c -1) > ./tmp/self-signed-ssl/dns
    DNS=$(cat ./tmp/self-signed-ssl/dns)
else
    DNS="DNS:$CN"
fi

# IP
echo
info "IP" " - press enter to skip"
echo "e.g. Your internal service (Web, API, or Database) IP. Use \",\" for more than one IP"
echo "Default: EMPTY"
read -r -p ">  " IP_ADDR
IP=

if [ -n "$IP_ADDR" ]; then
    ARR_IP=$(echo $IP_ADDR | tr ',' '\n')
    for OUTPUT in $ARR_IP; do
        sleep 0.1; echo -n "IP:$OUTPUT," >> ./tmp/self-signed-ssl/ip &
    done
    echo -n $(cat ./tmp/self-signed-ssl/ip | head -c -1) > ./tmp/self-signed-ssl/ip
    IP=$(cat ./tmp/self-signed-ssl/ip)
fi

# Certificate active period
echo
info "Certificate duration" " - press enter to skip"
echo "Certificate active period in days"
echo "Default: 365"
read -r -p ">  " DAYS
DURATION=${DAYS:=365}

if ! echo "$DURATION" | grep -qE "^[0-9]+$"; then
    error "ERROR: Invalid certificate duration"
    exit 1
fi

# Country code
# Country code according to Alpha-2 Code
# Visit - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
echo
info "Country Code (C)" " - press enter to skip"
echo "Country code according to Alpha-2 Code. Visit https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2"
echo "Default: US"
read -r -p ">  " COUNTRY_CODE
C=${COUNTRY_CODE:=US}

if [ "$C" != "US" ]; then
    C=$(echo $COUNTRY_CODE | awk '{print toupper($0)}')
fi

# State
echo
info "State (ST)" " - press enter to skip"
echo "State or province name"
echo "Default: EMPTY"
read -r -p ">  " STATE

# City
echo
info "City (L)" " - press enter to skip"
echo "Default: EMPTY"
read -r -p ">  " CITY

# Organization name
echo
info "Organization name (O)" " - press enter to skip"
echo "Default: EMPTY"
read -r -p ">  " ORGANIZATION_NAME

# Organization name
echo
info "Organization unit name (OU)" " - press enter to skip"
echo "Default: EMPTY"
read -r -p ">  " ORGANIZATION_UNIT

echo
echo "Please wait..."
echo

mkdir -p ./tls/$CN

PASSPHRASE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1)

openssl ecparam -genkey -name $SIZE -out ./tls/$CN/ca-key.pem
openssl req -new -x509 -sha256 \
    -subj "/C=$C/ST=$STATE/L=$CITY/O=$ORGANIZATION_NAME/OU=$ORGANIZATION_UNIT/CN=$CN" \
    -days $DURATION -passin "pass:$PASSPHRASE" \
    -key ./tls/$CN/ca-key.pem \
    -out ./tls/$CN/ca.pem

openssl ecparam -genkey -name $SIZE -out ./tls/$CN/cert-key.pem
openssl req -new -sha256 \
    -subj "/C=$C/ST=$STATE/L=$CITY/O=$ORGANIZATION_NAME/OU=$ORGANIZATION_UNIT/CN=$CN" \
    -key ./tls/$CN/cert-key.pem \
    -out ./tls/$CN/cert.csr

if [ -n "$IP" ]; then
    echo -n "subjectAltName=$DNS,$IP" > ./tls/$CN/extfile.cnf
else
    echo -n "subjectAltName=$DNS" > ./tls/$CN/extfile.cnf
fi

openssl x509 -req -sha256 \
    -days $DURATION \
    -in ./tls/$CN/cert.csr \
    -CA ./tls/$CN/ca.pem \
    -CAkey ./tls/$CN/ca-key.pem \
    -out ./tls/$CN/cert.pem \
    -extfile ./tls/$CN/extfile.cnf \
    -passin "pass:$PASSPHRASE" \
    -CAcreateserial

cat ./tls/$CN/cert.pem > ./tls/$CN/fullchain.pem
cat ./tls/$CN/ca.pem >> ./tls/$CN/fullchain.pem

cp ./tls/$CN/ca.pem ./tls/$CN/ca.crt

cat <<EOF >./tls/$CN/README
# PEM PASSPHRASE
$PASSPHRASE

# INITIALIZE SSL/TLS (For your backend or database)
Import the credentials data
    - ca = "ca.crt" optional
    - key = "cert-key.pem" required
    - cert = "fullchain.pem" required

# VALIDATE REQUEST (For web or API request)
Import "ca.crt" to validate (HTTPS) communication traffic requests
    - Browser
        - Google Chrome = https://docs.vmware.com/en/VMware-Adapter-for-SAP-Landscape-Management/2.1.0/Installation-and-Administration-Guide-for-VLA-Administrators/GUID-D60F08AD-6E54-4959-A272-458D08B8B038.html
        - Mozilla Firefox = https://docs.vmware.com/en/VMware-Adapter-for-SAP-Landscape-Management/2.1.0/Installation-and-Administration-Guide-for-VLA-Administrators/GUID-0CED691F-79D3-43A4-B90D-CD97650C13A0.html
    - Postman = https://learning.postman.com/docs/sending-requests/certificates
    - Insomnia = https://docs.insomnia.rest/insomnia/client-certificates
    - cURL = curl --cacert <PATH_TO_ca.crt> https://localhost:9443
EOF

find ./tls/$CN -type f \( -name "ca.crt" \
    -o -name "ca.pem" \
    -o -name "ca-key.pem" \
    -o -name "cert.csr" \
    -o -name "cert-key.pem" \
    -o -name "cert.pem" \
    -o -name "fullchain.pem" \
    -o -name "extfile.cnf" \) -exec chmod 400 {} \;

rm -rf ./tmp

echo
echo "DONE!"